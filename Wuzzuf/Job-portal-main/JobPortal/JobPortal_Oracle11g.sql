-- Connect as a user with privileges to create users/schemas
-- Usually SYSTEM or SYS AS SYSDBA

-- First, drop the schema if it exists
BEGIN
   EXECUTE IMMEDIATE 'DROP USER JOBPORTAL CASCADE';
EXCEPTION
   WHEN OTHERS THEN
      IF SQLCODE != -1918 THEN
         RAISE;
      END IF;
END;
/

-- Create the JobPortal user/schema
CREATE USER JOBPORTAL IDENTIFIED BY jobportal_password
DEFAULT TABLESPACE USERS
TEMPORARY TABLESPACE TEMP
QUOTA UNLIMITED ON USERS;

-- Grant necessary privileges
GRANT CONNECT, RESOURCE TO JOBPORTAL;
GRANT CREATE SESSION, CREATE TABLE, CREATE PROCEDURE, CREATE SEQUENCE, CREATE TRIGGER TO JOBPORTAL;

-- Connect to the JobPortal schema
CONNECT JOBPORTAL/jobportal_password;

-- Create sequences for auto-incrementing IDs
CREATE SEQUENCE SEQ_ADMIN_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_SEEKER_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_EMPLOYER_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_SKILL_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_CATEGORY_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_JOB_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_JOBSKILL_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_SEEKERSKILL_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_APPLICATION_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_EDUCATION_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_EXPERIENCE_ID START WITH 1 INCREMENT BY 1;

-- Create Admin Table
CREATE TABLE ADMINS (
    ADMIN_ID NUMBER PRIMARY KEY,
    USERNAME VARCHAR2(50) NOT NULL,
    PASSWORD VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP
);

-- Create trigger for Admin ID
CREATE OR REPLACE TRIGGER TRG_ADMINS_BI
BEFORE INSERT ON ADMINS
FOR EACH ROW
BEGIN
    SELECT SEQ_ADMIN_ID.NEXTVAL INTO :NEW.ADMIN_ID FROM DUAL;
END;
/

-- Create JobSeekers Table
CREATE TABLE JOB_SEEKERS (
    SEEKER_ID NUMBER PRIMARY KEY,
    FIRST_NAME VARCHAR2(50) NOT NULL,
    LAST_NAME VARCHAR2(50) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL UNIQUE,
    PASSWORD VARCHAR2(100) NOT NULL,
    PHONE VARCHAR2(20),
    ADDRESS VARCHAR2(200),
    RESUME CLOB,
    PROFILE_PICTURE BLOB,
    CREATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    IS_ACTIVE NUMBER(1) DEFAULT 1
);

-- Create trigger for JobSeeker ID
CREATE OR REPLACE TRIGGER TRG_JOB_SEEKERS_BI
BEFORE INSERT ON JOB_SEEKERS
FOR EACH ROW
BEGIN
    SELECT SEQ_SEEKER_ID.NEXTVAL INTO :NEW.SEEKER_ID FROM DUAL;
END;
/

-- Create Employers Table
CREATE TABLE EMPLOYERS (
    EMPLOYER_ID NUMBER PRIMARY KEY,
    COMPANY_NAME VARCHAR2(100) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL UNIQUE,
    PASSWORD VARCHAR2(100) NOT NULL,
    PHONE VARCHAR2(20),
    ADDRESS VARCHAR2(200),
    COMPANY_DESCRIPTION CLOB,
    COMPANY_LOGO BLOB,
    WEBSITE VARCHAR2(100),
    CREATED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    IS_ACTIVE NUMBER(1) DEFAULT 1
);

-- Create trigger for Employer ID
CREATE OR REPLACE TRIGGER TRG_EMPLOYERS_BI
BEFORE INSERT ON EMPLOYERS
FOR EACH ROW
BEGIN
    SELECT SEQ_EMPLOYER_ID.NEXTVAL INTO :NEW.EMPLOYER_ID FROM DUAL;
END;
/

-- Create Skills Table
CREATE TABLE SKILLS (
    SKILL_ID NUMBER PRIMARY KEY,
    SKILL_NAME VARCHAR2(50) NOT NULL UNIQUE
);

-- Create trigger for Skill ID
CREATE OR REPLACE TRIGGER TRG_SKILLS_BI
BEFORE INSERT ON SKILLS
FOR EACH ROW
BEGIN
    SELECT SEQ_SKILL_ID.NEXTVAL INTO :NEW.SKILL_ID FROM DUAL;
END;
/

-- Create JobCategories Table
CREATE TABLE JOB_CATEGORIES (
    CATEGORY_ID NUMBER PRIMARY KEY,
    CATEGORY_NAME VARCHAR2(50) NOT NULL UNIQUE
);

-- Create trigger for Category ID
CREATE OR REPLACE TRIGGER TRG_JOB_CATEGORIES_BI
BEFORE INSERT ON JOB_CATEGORIES
FOR EACH ROW
BEGIN
    SELECT SEQ_CATEGORY_ID.NEXTVAL INTO :NEW.CATEGORY_ID FROM DUAL;
END;
/

-- Create Jobs Table
CREATE TABLE JOBS (
    JOB_ID NUMBER PRIMARY KEY,
    EMPLOYER_ID NUMBER,
    TITLE VARCHAR2(100) NOT NULL,
    DESCRIPTION CLOB NOT NULL,
    CATEGORY_ID NUMBER,
    LOCATION VARCHAR2(100),
    SALARY NUMBER(18,2),
    JOB_TYPE VARCHAR2(50),
    POSTED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    DEADLINE TIMESTAMP,
    IS_ACTIVE NUMBER(1) DEFAULT 1,
    CONSTRAINT FK_JOBS_EMPLOYER FOREIGN KEY (EMPLOYER_ID) REFERENCES EMPLOYERS(EMPLOYER_ID),
    CONSTRAINT FK_JOBS_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES JOB_CATEGORIES(CATEGORY_ID)
);

-- Create trigger for Job ID
CREATE OR REPLACE TRIGGER TRG_JOBS_BI
BEFORE INSERT ON JOBS
FOR EACH ROW
BEGIN
    SELECT SEQ_JOB_ID.NEXTVAL INTO :NEW.JOB_ID FROM DUAL;
END;
/

-- Create JobSkills Table
CREATE TABLE JOB_SKILLS (
    JOB_SKILL_ID NUMBER PRIMARY KEY,
    JOB_ID NUMBER,
    SKILL_ID NUMBER,
    CONSTRAINT FK_JOBSKILLS_JOB FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID) ON DELETE CASCADE,
    CONSTRAINT FK_JOBSKILLS_SKILL FOREIGN KEY (SKILL_ID) REFERENCES SKILLS(SKILL_ID) ON DELETE CASCADE
);

-- Create trigger for JobSkill ID
CREATE OR REPLACE TRIGGER TRG_JOB_SKILLS_BI
BEFORE INSERT ON JOB_SKILLS
FOR EACH ROW
BEGIN
    SELECT SEQ_JOBSKILL_ID.NEXTVAL INTO :NEW.JOB_SKILL_ID FROM DUAL;
END;
/

-- Create SeekerSkills Table
CREATE TABLE SEEKER_SKILLS (
    SEEKER_SKILL_ID NUMBER PRIMARY KEY,
    SEEKER_ID NUMBER,
    SKILL_ID NUMBER,
    CONSTRAINT FK_SEEKERSKILLS_SEEKER FOREIGN KEY (SEEKER_ID) REFERENCES JOB_SEEKERS(SEEKER_ID) ON DELETE CASCADE,
    CONSTRAINT FK_SEEKERSKILLS_SKILL FOREIGN KEY (SKILL_ID) REFERENCES SKILLS(SKILL_ID) ON DELETE CASCADE
);

-- Create trigger for SeekerSkill ID
CREATE OR REPLACE TRIGGER TRG_SEEKER_SKILLS_BI
BEFORE INSERT ON SEEKER_SKILLS
FOR EACH ROW
BEGIN
    SELECT SEQ_SEEKERSKILL_ID.NEXTVAL INTO :NEW.SEEKER_SKILL_ID FROM DUAL;
END;
/

-- Create JobApplications Table
CREATE TABLE JOB_APPLICATIONS (
    APPLICATION_ID NUMBER PRIMARY KEY,
    JOB_ID NUMBER,
    SEEKER_ID NUMBER,
    APPLIED_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    COVER_LETTER CLOB,
    STATUS VARCHAR2(50) DEFAULT 'Pending',
    RESUME_FILE CLOB,
    CONSTRAINT FK_APPLICATIONS_JOB FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID) ON DELETE CASCADE,
    CONSTRAINT FK_APPLICATIONS_SEEKER FOREIGN KEY (SEEKER_ID) REFERENCES JOB_SEEKERS(SEEKER_ID) ON DELETE CASCADE
);

-- Create trigger for Application ID
CREATE OR REPLACE TRIGGER TRG_JOB_APPLICATIONS_BI
BEFORE INSERT ON JOB_APPLICATIONS
FOR EACH ROW
BEGIN
    SELECT SEQ_APPLICATION_ID.NEXTVAL INTO :NEW.APPLICATION_ID FROM DUAL;
END;
/

-- Create Education Table
CREATE TABLE EDUCATION (
    EDUCATION_ID NUMBER PRIMARY KEY,
    SEEKER_ID NUMBER,
    DEGREE VARCHAR2(100) NOT NULL,
    INSTITUTION VARCHAR2(100) NOT NULL,
    FIELD_OF_STUDY VARCHAR2(100),
    START_DATE DATE,
    END_DATE DATE,
    DESCRIPTION CLOB,
    CONSTRAINT FK_EDUCATION_SEEKER FOREIGN KEY (SEEKER_ID) REFERENCES JOB_SEEKERS(SEEKER_ID) ON DELETE CASCADE
);

-- Create trigger for Education ID
CREATE OR REPLACE TRIGGER TRG_EDUCATION_BI
BEFORE INSERT ON EDUCATION
FOR EACH ROW
BEGIN
    SELECT SEQ_EDUCATION_ID.NEXTVAL INTO :NEW.EDUCATION_ID FROM DUAL;
END;
/

-- Create Experience Table
CREATE TABLE EXPERIENCE (
    EXPERIENCE_ID NUMBER PRIMARY KEY,
    SEEKER_ID NUMBER,
    JOB_TITLE VARCHAR2(100) NOT NULL,
    COMPANY VARCHAR2(100) NOT NULL,
    LOCATION VARCHAR2(100),
    START_DATE DATE,
    END_DATE DATE,
    DESCRIPTION CLOB,
    IS_CURRENT_JOB NUMBER(1) DEFAULT 0,
    CONSTRAINT FK_EXPERIENCE_SEEKER FOREIGN KEY (SEEKER_ID) REFERENCES JOB_SEEKERS(SEEKER_ID) ON DELETE CASCADE
);

-- Create trigger for Experience ID
CREATE OR REPLACE TRIGGER TRG_EXPERIENCE_BI
BEFORE INSERT ON EXPERIENCE
FOR EACH ROW
BEGIN
    SELECT SEQ_EXPERIENCE_ID.NEXTVAL INTO :NEW.EXPERIENCE_ID FROM DUAL;
END;
/

-- Create stored procedures (Oracle uses PL/SQL)

-- Admin Login
CREATE OR REPLACE PROCEDURE SP_ADMIN_LOGIN(
    p_username IN VARCHAR2,
    p_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_cursor FOR
    SELECT * FROM ADMINS WHERE USERNAME = p_username;
END;
/

-- JobSeeker Login
CREATE OR REPLACE PROCEDURE SP_JOBSEEKER_LOGIN(
    p_email IN VARCHAR2,
    p_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_cursor FOR
    SELECT * FROM JOB_SEEKERS WHERE EMAIL = p_email;
END;
/

-- Employer Login
CREATE OR REPLACE PROCEDURE SP_EMPLOYER_LOGIN(
    p_email IN VARCHAR2,
    p_cursor OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_cursor FOR
    SELECT * FROM EMPLOYERS WHERE EMAIL = p_email;
END;
/

-- Create JobSeeker
CREATE OR REPLACE PROCEDURE SP_CREATE_JOBSEEKER(
    p_first_name IN VARCHAR2,
    p_last_name IN VARCHAR2,
    p_email IN VARCHAR2,
    p_password IN VARCHAR2,
    p_phone IN VARCHAR2 DEFAULT NULL,
    p_address IN VARCHAR2 DEFAULT NULL,
    p_seeker_id OUT NUMBER
)
AS
BEGIN
    INSERT INTO JOB_SEEKERS (FIRST_NAME, LAST_NAME, EMAIL, PASSWORD, PHONE, ADDRESS)
    VALUES (p_first_name, p_last_name, p_email, p_password, p_phone, p_address)
    RETURNING SEEKER_ID INTO p_seeker_id;
END;
/

-- Create Employer
CREATE OR REPLACE PROCEDURE SP_CREATE_EMPLOYER(
    p_company_name IN VARCHAR2,
    p_email IN VARCHAR2,
    p_password IN VARCHAR2,
    p_phone IN VARCHAR2 DEFAULT NULL,
    p_address IN VARCHAR2 DEFAULT NULL,
    p_company_description IN CLOB DEFAULT NULL,
    p_website IN VARCHAR2 DEFAULT NULL,
    p_employer_id OUT NUMBER
)
AS
BEGIN
    INSERT INTO EMPLOYERS (COMPANY_NAME, EMAIL, PASSWORD, PHONE, ADDRESS, COMPANY_DESCRIPTION, WEBSITE)
    VALUES (p_company_name, p_email, p_password, p_phone, p_address, p_company_description, p_website)
    RETURNING EMPLOYER_ID INTO p_employer_id;
END;
/

-- Insert default admin
INSERT INTO ADMINS (USERNAME, PASSWORD, EMAIL)
VALUES ('admin', '$2a$11$jPL3MQbvCodTRrTQTpTR6.mxm5Xz9q5Ygb1VY9JUJUlX9QmKI5VVa', 'admin@jobportal.com');

-- Insert sample job categories
INSERT INTO JOB_CATEGORIES (CATEGORY_NAME) VALUES ('Information Technology');
INSERT INTO JOB_CATEGORIES (CATEGORY_NAME) VALUES ('Healthcare');
INSERT INTO JOB_CATEGORIES (CATEGORY_NAME) VALUES ('Finance');
INSERT INTO JOB_CATEGORIES (CATEGORY_NAME) VALUES ('Education');
INSERT INTO JOB_CATEGORIES (CATEGORY_NAME) VALUES ('Marketing');
INSERT INTO JOB_CATEGORIES (CATEGORY_NAME) VALUES ('Engineering');
INSERT INTO JOB_CATEGORIES (CATEGORY_NAME) VALUES ('Sales');
INSERT INTO JOB_CATEGORIES (CATEGORY_NAME) VALUES ('Customer Service');
INSERT INTO JOB_CATEGORIES (CATEGORY_NAME) VALUES ('Human Resources');
INSERT INTO JOB_CATEGORIES (CATEGORY_NAME) VALUES ('Administrative');

-- Insert sample skills
INSERT INTO SKILLS (SKILL_NAME) VALUES ('JavaScript');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Python');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Java');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('SQL');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('HTML/CSS');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('React');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Angular');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Node.js');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('AWS');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Docker');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Kubernetes');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Machine Learning');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Data Analysis');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Project Management');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Communication');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Leadership');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Problem Solving');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Teamwork');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Time Management');
INSERT INTO SKILLS (SKILL_NAME) VALUES ('Creativity');

COMMIT;

-- Output success message
BEGIN
    DBMS_OUTPUT.PUT_LINE('JobPortal database and tables created successfully!');
END;
/